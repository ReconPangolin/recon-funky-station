using System.Linq;
using System.Numerics;
using Content.Client.Message;
using Content.Shared.Atmos;
using Content.Client.UserInterface.Controls;
using Content.Shared._Funkystation.Botany.PlantAnalyzer;
using Content.Shared.Alert;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.IdentityManagement;
using Content.Shared.Inventory;
using Content.Shared.MedicalScanner;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Content.Shared.Nutrition.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Funkystation.Botany.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class ReconPlantAnalyzerWindow : FancyWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly IPrototypeManager _prototypes;
        private readonly IResourceCache _cache;

        public ReconPlantAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _entityManager = dependencies.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
            _prototypes = dependencies.Resolve<IPrototypeManager>();
            _cache = dependencies.Resolve<IResourceCache>();
        }

        public void Populate(PlantAnalyzerUserMessage msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);

            if (target == null)
            {
                SpriteView.Visible = false;

                NoDataTexture.Visible = true;

                NoPlantDataText.Visible = true;
                return;
            }

            SpriteView.SetEntity(target.Value);
            SpriteView.Visible = true;

            NoDataTexture.Visible = false;

            NoPlantDataText.Visible = false;


            YieldLabel.Text = $"{msg.Yield} crops per harvest";

            ProductionLabel.Text = $"{msg.Production} minutes";

            MaturationLabel.Text = $"{msg.Maturation} minutes";


            var name = new FormattedMessage();
            name.PushColor(Color.White);
            name.AddText(msg.PlantName);
            PlantNameLabel.SetMessage(name);

        }

    }
}
